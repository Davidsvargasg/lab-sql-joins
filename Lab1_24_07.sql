-- Active: 1721290975934@@127.0.0.1@3306@sakila
USE sakila

--Write SQL queries to perform the following tasks using the Sakila database:

--List the number of films per category.

SELECT c.name as film_category, COUNT (f.film_id) AS number_films
FROM sakila.film_category AS f
JOIN sakila.category AS c
ON f.category_id = c.category_id
GROUP BY film_category
ORDER BY COUNT (f.film_id);

--Retrieve the store ID, city, and country for each store.

SELECT s.store_id , c.city, co.country
FROM store AS s
JOIN address AS a
ON s.address_id = a.address_id
JOIN city AS c 
ON a.city_id = c.city_id
JOIN country AS co 
ON c.country_id = co.country_id;

--Calculate the total revenue generated by each store in dollars.

SELECT SUM (p.amount), s.store_id
FROM payment AS p
JOIN customer AS c
ON p.customer_id = c.customer_id
JOIN store AS s
ON c.store_id = s.store_id
GROUP BY s.store_id;

--Determine the average running time of films for each category.

SELECT c.name, AVG(f.length) AS average_running_time
FROM film AS f
JOIN film_category AS fc
ON f.film_id = fc.film_id
JOIN category AS c
ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY AVG(f.length) ;

--Bonus:

--Identnify the film categories with the longest average running time.

SELECT c.name, AVG(f.length) AS average_running_time
FROM film AS f
JOIN film_category AS fc
ON f.film_id = fc.film_id
JOIN category AS c
ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY AVG(f.length) DESC;

--Display the top 10 most frequently rented movies in descending order.

SELECT f.title, COUNT (r.inventory_id) AS most_rented
FROM film AS f
JOIN inventory AS i
ON f.film_id = i.film_id
JOIN rental AS r
ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY COUNT (r.inventory_id) DESC;

--Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT f.title, s.store_id
FROM store AS s
JOIN inventory AS i
ON s.store_id = i.store_id
JOIN film as f
ON i.film_id = f.film_id
GROUP BY f.title, s.store_id
HAVING f.title = "Academy Dinosaur" AND s.store_id =1
ORDER BY s.store_id;

--Provide a list of all distinct film titles, along with their availability 
--status in the inventory. --Include a column indicating whether each title
-- is 'Available' or 'NOT available.'--Note that there are 42 
--titles that are not in the inventory, and this information 
--can be obtained using a CASE statement combined with IFNULL."

SELECT
    title,
    CASE
        WHEN inventory_id IS NULL THEN 'NOT available'
        ELSE 'Available'
    END AS availability_status
FROM (
    SELECT DISTINCT
        f.title,
        i.inventory_id
    FROM
        film f
    LEFT JOIN
        inventory i ON f.film_id = i.film_id
) AS film_availability
ORDER BY title;

 
